// #region ***** Generators *********//

generator client {
  provider = "prisma-client-js"
}

// generator dbml {
//   provider            = "prisma-dbml-generator"
//   output              = "./dbml"
//   outputName          = "rahat-c2c-model.dbml"
//   projectName         = "Rahat C2C"
//   projectDatabaseType = "PostgreSQL"
//   projectNote         = "Rahat C2C"
// }

// generator docs {
//   provider = "node node_modules/prisma-docs-generator"
//   output   = "./docs"
// }

// generator jsonSchema {
//   provider = "prisma-json-schema-generator"
//   output   = "./json"
// }

// #endregion

// #region ***** Data source*********//

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// #endregion

// #region ***** Data Model*********//

enum SettingDataType {
  STRING
  NUMBER
  BOOLEAN
  OBJECT
}

enum BeneficiaryType {
  ENROLLED
  REFERRED
}

model Setting {
  name           String          @id @unique
  value          Json
  dataType       SettingDataType
  requiredFields String[]
  isReadOnly     Boolean         @default(false)
  isPrivate      Boolean         @default(true)

  @@map("tbl_settings")
}

// ++++++++++++++++++ START: @c2c/beneficiaries +++++++++++++++++++++++++++

model Beneficiary {
  id                      Int                       @id @default(autoincrement()) @db.Integer()
  uuid                    String                    @unique @db.Uuid()
  walletAddress           String? @unique
  extras                  Json?
  type                    BeneficiaryType           @default(ENROLLED)
  isVerified              Boolean                   @default(false)
  DisbursementBeneficiary DisbursementBeneficiary[]

  createdAt               DateTime                  @default(now())
  updatedAt               DateTime?                 @updatedAt
  deletedAt               DateTime?

  @@map(name: "tbl_beneficiaries")
}

model BeneficiaryGroups {
  id                  Int     @id @default(autoincrement()) @db.Integer()
  uuid                String  @unique @default(uuid()) @db.Uuid()
  name                String

  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt()
  deletedAt DateTime?
  Campaign  Campaign[]

  @@map("tbl_beneficiaries_groups")
}

model Campaign {
  id          Int     @id @default(autoincrement()) @db.Integer()
  uuid        String  @unique @default(uuid()) @db.Uuid()
  // TODO: remove campaignId
  campaignId Int     @default(autoincrement()) 
  name        String
  message     String
  transportId String
  sessionId   String?
  groupUID    String? @db.Uuid()

  isActive  Boolean            @default(true)
  createdAt DateTime           @default(now())
  updatedAt DateTime?          @updatedAt()
  group     BeneficiaryGroups? @relation(fields: [groupUID], references: [uuid])

  @@map(name: "tbl_campaign")
}

model Disbursement {
  id                      Int                       @id @default(autoincrement()) @db.Integer()
  uuid                    String                    @unique @db.Uuid()
  DisbursementBeneficiary DisbursementBeneficiary[]
  type                    DisbursementType          @default(PROJECT)
  status                  DisbursementStatus        @default(DRAFT)
  timestamp               String?
  amount                  String
  transactionHash         String?
  extras                  Json?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime?                 @updatedAt
}

model DisbursementBeneficiary {
  id              Int          @id @default(autoincrement()) @db.Integer()
  disbursementId  Int
  beneficiaryWalletAddress   String
  Disbursement    Disbursement @relation(fields: [disbursementId], references: [id])
  Beneficiary     Beneficiary  @relation(fields: [beneficiaryWalletAddress], references: [walletAddress])
  from            String?
  amount          String
  transactionHash String?
  extras          Json?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime?    @updatedAt

  @@unique([disbursementId, beneficiaryWalletAddress]) 
}

model Stats {
  name  String  @id @unique
  data  Json
  group String?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@map("tbl_stats")
}

enum DisbursementType {
  PROJECT
  EOA
  MULTISIG
}

enum DisbursementStatus {
  DRAFT
  PENDING
  COMPLETED
  REJECTED
}
